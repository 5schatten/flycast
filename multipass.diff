diff --git a/core/libretro/libretro.cpp b/core/libretro/libretro.cpp
index a8ee321a..4b707f21 100644
--- a/core/libretro/libretro.cpp
+++ b/core/libretro/libretro.cpp
@@ -398,8 +398,6 @@ static void update_variables(void)
       else
          settings.rend.RenderToTextureBuffer = false;
    }
-   else
-      settings.rend.RenderToTextureBuffer = false;
 
    var.key = "reicast_enable_purupuru";
    if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE, &var) && var.value)
diff --git a/core/nullDC.cpp b/core/nullDC.cpp
index f3d22917..9316c898 100644
--- a/core/nullDC.cpp
+++ b/core/nullDC.cpp
@@ -270,8 +270,9 @@ void LoadSettings(void)
    settings.pvr.Emulation.zMax         = 1.0f;
 
 	settings.pvr.MaxThreads			       = 3;
-   settings.rend.RenderToTexture        = 1;
-   settings.rend.RenderToTextureBuffer  = 0;
+   settings.rend.TranslucentPolygonDepthMask = false;
+   settings.rend.RenderToTexture        = true;
+   settings.rend.RenderToTextureBuffer  = false;
 	settings.pvr.SynchronousRendering	 = 0;
 
 	settings.debug.SerialConsole         = 0;
diff --git a/core/rend/gles/gldraw.cpp b/core/rend/gles/gldraw.cpp
index 46535415..370c7d97 100644
--- a/core/rend/gles/gldraw.cpp
+++ b/core/rend/gles/gldraw.cpp
@@ -195,7 +195,12 @@ __forceinline void SetGPState(const PolyParam* gp, u32 cflip)
 
    /* Set Z mode, only if required */
    if (Type == ListType_Punch_Through || (Type == ListType_Translucent && SortingEnabled))
-      glcache.DepthFunc(GL_GEQUAL);
+   {
+      if (gp->isp.DepthMode == 7)		// Fixes VR2 menu but not sure about this one
+         glcache.DepthFunc(GL_ALWAYS);
+      else
+         glcache.DepthFunc(GL_GEQUAL);
+   }
    else
       glcache.DepthFunc(Zfunction[gp->isp.DepthMode]);
 
@@ -494,13 +499,11 @@ void GenSorted(int first, int count)
    }
 }
 
-void DrawSorted(u32 count)
+void DrawSorted(bool multipass)
 {
    //if any drawing commands, draw them
 	if (pidx_sort.size())
    {
-      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo.idxs2);
-
       u32 count=pidx_sort.size();
 
       {
@@ -520,8 +523,38 @@ void DrawSorted(u32 count)
             }
             params++;
          }
-
+         if (multipass && settings.rend.TranslucentPolygonDepthMask)
+			{
+				// Write to the depth buffer now. The next render pass might need it. (Cosmic Smash)
+				glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
+
+            glcache.Disable(GL_BLEND);
+
+				glcache.StencilMask(0);
+
+            // We use the modifier volumes shader because it's fast. We don't need textures, etc.
+            glcache.UseProgram(modvol_shader.program);
+				glUniform1f(modvol_shader.sp_ShaderColor, 1.f);
+
+				glcache.DepthFunc(GL_GEQUAL);
+				glcache.DepthMask(GL_TRUE);
+            
+				for (u32 p = 0; p < count; p++)
+				{
+					PolyParam* params = pidx_sort[p].ppid;
+					if (pidx_sort[p].count > 2 && !params->isp.ZWriteDis) {
+                  // FIXME no clipping in modvol shader
+                  //SetTileClip(gp->tileclip,true);
+                  SetCull(params->isp.CullMode ^ gcflip);
+                  glDrawElements(GL_TRIANGLES, pidx_sort[p].count, GL_UNSIGNED_SHORT, (GLvoid*)(2 * pidx_sort[p].first));
+					}
+				}
+				glcache.StencilMask(0xFF);
+				glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
+			}
       }
+      // Re-bind the previous index buffer for subsequent render passes
+      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo.idxs2);
    }
 }
 
@@ -793,12 +826,7 @@ void DrawStrips(void)
       //initial state
       glcache.Enable(GL_DEPTH_TEST);
 
-#if 0
-      glClearDepth(0.f);
-#endif
       glcache.DepthMask(GL_TRUE);
-      glcache.StencilMask(0xFF);
-      glClear(GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
 
       //Opaque
       DrawList<ListType_Opaque, false>(pvrrc.global_param_op, 
@@ -818,10 +846,11 @@ void DrawStrips(void)
       //Alpha blended
       if (settings.pvr.Emulation.AlphaSortMode == 0)
       {
-         u32 count = pidx_sort.size();
          //if any drawing commands, draw them
-         if (pvrrc.isAutoSort && count)
-            DrawSorted(count);
+         if (pvrrc.isAutoSort)
+            DrawSorted(render_pass <
+                  pvrrc.render_passes.used() - 1
+                  );
          else
             DrawList<ListType_Translucent, false>(pvrrc.global_param_tr, previous_pass.tr_count, current_pass.tr_count - previous_pass.tr_count);
       }
diff --git a/core/rend/gles/gles.cpp b/core/rend/gles/gles.cpp
index c46b8c28..ea0e8969 100644
--- a/core/rend/gles/gles.cpp
+++ b/core/rend/gles/gles.cpp
@@ -860,7 +860,9 @@ static bool RenderFrame(void)
       glcache.ClearColor(0,0,0,1.0f);
 
    glcache.Disable(GL_SCISSOR_TEST);
-   glClear(GL_COLOR_BUFFER_BIT);
+   glClearDepth(0.f);
+   glStencilMask(0xFF);
+   glClear(GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
 	//move vertex to gpu
 
diff --git a/core/types.h b/core/types.h
index e6a3b2d6..2d15f594 100644
--- a/core/types.h
+++ b/core/types.h
@@ -578,6 +578,7 @@ struct settings_t
 		bool WideScreen;
       bool RenderToTexture;
       bool RenderToTextureBuffer;
+      bool TranslucentPolygonDepthMask;
 	} rend;
 
 	struct
