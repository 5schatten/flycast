diff --git a/core/hw/sh4/dyna/driver.cpp b/core/hw/sh4/dyna/driver.cpp
index a307477..99596a8 100644
--- a/core/hw/sh4/dyna/driver.cpp
+++ b/core/hw/sh4/dyna/driver.cpp
@@ -102,10 +102,6 @@ static void recSh4_Run(void)
 	
 	verify(rcb_noffs(&next_pc)==-184);
 	ngen_mainloop(sh4_dyna_rcb);
-
-#if !defined(TARGET_BOUNDED_EXECUTION)
-	sh4_int_bCpuRun=false;
-#endif
 }
 
 void emit_Write32(u32 data)
diff --git a/core/hw/sh4/interpr/sh4_interpreter.cpp b/core/hw/sh4/interpr/sh4_interpreter.cpp
index 4c85243..d00109f 100644
--- a/core/hw/sh4/interpr/sh4_interpreter.cpp
+++ b/core/hw/sh4/interpr/sh4_interpreter.cpp
@@ -90,7 +90,6 @@ void Sh4_int_Stop(void)
 		sh4_int_bCpuRun=false;
 }
 
-#if defined(TARGET_BOUNDED_EXECUTION)
 void Sh4_int_Run(void)
 {
 	sh4_int_bCpuRun=true;
@@ -100,21 +99,6 @@ void Sh4_int_Run(void)
 	for (int i=0; i<10000; i++)
       Sh4_int_Run_exec(&l);
 }
-#else
-void Sh4_int_Run(void)
-{
-	sh4_int_bCpuRun=true;
-
-	s32 l=SH4_TIMESLICE;
-
-	do
-	{
-      Sh4_int_Run_exec(&l);
-	} while(sh4_int_bCpuRun);
-
-   Sh4_int_Stop();
-}
-#endif
 
 
 void Sh4_int_Step(void)
diff --git a/core/libretro/libretro.cpp b/core/libretro/libretro.cpp
index 6da72cc..94b6237 100644
--- a/core/libretro/libretro.cpp
+++ b/core/libretro/libretro.cpp
@@ -2,8 +2,6 @@
 #include <cstdarg>
 #include "types.h"
 
-#include <libco.h>
-
 #include "../hw/pvr/pvr_regs.h"
 
 #if defined(HAVE_OPENGL) || defined(HAVE_OPENGLES)
@@ -65,9 +63,6 @@ static retro_rumble_interface rumble;
 int dc_init(int argc,wchar* argv[]);
 void dc_run();
 
-static cothread_t ct_main;
-static cothread_t ct_dc;
-
 static int co_argc;
 static wchar** co_argv;
 
@@ -77,30 +72,19 @@ char game_dir_no_slash[1024];
 
 static void co_dc_thread(void)
 {
-	co_switch(ct_main);
 	dc_init(co_argc,co_argv);
-	co_switch(ct_main);
 	
 	dc_run();
 }
 
-static void co_dc_init(int argc,wchar* argv[])
-{
-	ct_main = co_active();
-	ct_dc = co_create(1024*1024/*why does libco demand me to know this*/, co_dc_thread);
-	co_argc=argc;
-	co_argv=argv;
-}
-
 void co_dc_run(void)
 {
    //puts("ENTER LOOP");
-	co_switch(ct_dc);
+   dc_run();
 }
 
 void co_dc_yield(void)
 {
-	co_switch(ct_main);
 }
 
 void retro_set_video_refresh(retro_video_refresh_t cb)
@@ -216,8 +200,6 @@ void retro_init(void)
    // Set color mode
    unsigned color_mode = RETRO_PIXEL_FORMAT_XRGB8888;
    environ_cb(RETRO_ENVIRONMENT_SET_PIXEL_FORMAT, &color_mode);
-
-   co_dc_init(0, NULL);
 }
 
 void retro_deinit(void)
@@ -375,17 +357,26 @@ static void update_variables(void)
       enable_purupuru = (strcmp("enabled", var.value) == 0);
 }
 
+static bool first_run = true;
+
 void retro_run (void)
 {
    bool updated = false;
    if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE, &updated) && updated)
       update_variables();
 
+   if (first_run)
+   {
+      co_dc_thread();
+      first_run = false;
+      return;
+   }
+
+   poll_cb();
    co_dc_run();
 #if defined(HAVE_OPENGL) || defined(HAVE_OPENGLES)
-   video_cb(is_dupe ? 0 : RETRO_HW_FRAME_BUFFER_VALID, screen_width, screen_height, 0);
+   video_cb(RETRO_HW_FRAME_BUFFER_VALID, screen_width, screen_height, 0);
 #endif
-   is_dupe = true;
 }
 
 void retro_reset (void)
@@ -398,7 +389,6 @@ static void context_reset(void)
 {
    printf("context_reset.\n");
    glsm_ctl(GLSM_CTL_STATE_CONTEXT_RESET, NULL);
-   co_switch(ct_dc);
 }
 
 static void context_destroy(void)
@@ -536,10 +526,9 @@ bool retro_load_game(const struct retro_game_info *game)
 
    if (!glsm_ctl(GLSM_CTL_STATE_CONTEXT_INIT, &params))
       return false;
-#else
-   co_switch(ct_dc);
 #endif
 
+
    return true;
 }
 
@@ -671,8 +660,6 @@ unsigned retro_api_version(void)
 //Reicast stuff
 void os_DoEvents(void)
 {
-   is_dupe = false;
-   poll_cb();
 }
 
 void os_CreateWindow()
diff --git a/core/rec.cpp b/core/rec.cpp
index e701db5..3de8866 100644
--- a/core/rec.cpp
+++ b/core/rec.cpp
@@ -47,11 +47,7 @@ void ngen_mainloop(void* v_cntx)
 	Sh4RCB* ctx = (Sh4RCB*)((u8*)v_cntx - sizeof(Sh4RCB));
 
    for (
-#if defined(TARGET_BOUNDED_EXECUTION)
-	int i=0; i<10000; i++
-#else
-	;;
-#endif
+	int i=0; i<7395; i++
    )
       ngen_mainloop_exec(ctx);
 }
